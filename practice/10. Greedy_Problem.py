# 모험가 길드장인 동빈이는 모험가 그룹을 안전하게 구성하고자 공포도가 X인 모험가는 반드시 X명 이상으로
# 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있도록 규정했다.
# N명의 모험가에 대한 정보가 주어졌을때, 여행을 떠날 수 있는 그룹 수의 최댓값을 구하라.

## Developer`s Kick!
# 공포도가 낮을 수록 그룹을 짜기 쉽기 때문에 오름차순으로 정렬을 해준다. 그 후 모든 모험가들을 차례대로 검사한다.
# 현재 모험가의 공포도가 그룹인원보다 높다면 그룹인원에 추가하고 다음 모험가를 탐색한다.
# 현재 모험가의 공포도가 그룹인원과 같다면 그룹과 여행을 떠난다.
# 그리고 다음 모험가를 탐색하며 새로운 그룹을 만든다. 이를 반복하면서 구하면 된다.
'''
5
2 3 1 2 2
'''


def adventurer_Guild():
    # 모험가의 수
    n = int(input())
    # n = 5

    # 공포도의 값 리스트
    data = list(map(int, input().split()))
    # data = [2, 3, 1, 2, 2]
    data.sort()

    # 총 그룹의 수
    result = 0

    # 현재 그룹에 포함된 모험가의 수
    cnt = 0

    # for문
    for i in data:
        # 현재 그룹에 해당 모험가를 포함
        cnt += 1

        # 현재 그룹에 해당 모험가의 수가 현재 공포도 이상이라면, 그룹 결성
        if cnt >= i:
            # 총 그룹 수 증가
            result += 1

            # 현재 그룹에 포함된 모험가의 수 초기화
            cnt = 0

    print(result)

# 문제
# 각 자리가 숫자 (0부터 9)로만 이루어진 문자열 S가 주어졌을 때,
# 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 'X' 혹은 '+'연산자를 넣어
# 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성하세요.
# 단, +보다 X를 먼저 계산하는 일반적인 방식과는 달리,
# 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정합니다.

# 문자열에서 제일 좌측에 있는 수를 fst 하고 오른쪽으로 한개씩 연산한 후 그 값을 result로 바꿈
# fst와 오른쪽 숫자 하나씩 비교해서, 1이하인 수가 있으면 더하기연산
'''
02984
567
'''
def multiply_plus():
    data = input()

    ret = int(data[0])

    for i in range(1, len(data)):
        num = int(data[i])
        if num <= 1 or ret <= 1:
            ret += num
        else:
            ret *= num
    print(ret)


if __name__ == "__main__":
    # adventurer_Guild()
    multiply_plus()